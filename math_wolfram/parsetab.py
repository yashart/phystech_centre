
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER ADDITION SUBTRACTION MULTIPLICATION DIVISION POWER SQRT VARIABLE LPAREN RPARENexpression : expression SUBTRACTION termexpression : expression ADDITION termexpression : termterm : term DIVISION powterm : term MULTIPLICATION powterm : powpow : pow POWER operatorpow : operatoroperator : SUBTRACTION numoperator : SQRT numoperator : numnum : NUMBERnum : VARIABLEnum : LPAREN expression RPAREN'
    
_lr_action_items = {'DIVISION':([1,2,3,4,6,7,14,15,19,20,21,22,23,24,],[12,-13,-6,-12,-8,-11,-10,-9,-5,-4,-7,-14,12,12,]),'RPAREN':([1,2,3,4,6,7,14,15,16,19,20,21,22,23,24,],[-3,-13,-6,-12,-8,-11,-10,-9,22,-5,-4,-7,-14,-2,-1,]),'POWER':([2,3,4,6,7,14,15,19,20,21,22,],[-13,13,-12,-8,-11,-10,-9,13,13,-7,-14,]),'ADDITION':([1,2,3,4,6,7,10,14,15,16,19,20,21,22,23,24,],[-3,-13,-6,-12,-8,-11,17,-10,-9,17,-5,-4,-7,-14,-2,-1,]),'NUMBER':([0,5,8,9,11,12,13,17,18,],[4,4,4,4,4,4,4,4,4,]),'SQRT':([0,9,11,12,13,17,18,],[5,5,5,5,5,5,5,]),'MULTIPLICATION':([1,2,3,4,6,7,14,15,19,20,21,22,23,24,],[11,-13,-6,-12,-8,-11,-10,-9,-5,-4,-7,-14,11,11,]),'SUBTRACTION':([0,1,2,3,4,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,],[8,-3,-13,-6,-12,-8,-11,8,18,8,8,8,-10,-9,18,8,8,-5,-4,-7,-14,-2,-1,]),'LPAREN':([0,5,8,9,11,12,13,17,18,],[9,9,9,9,9,9,9,9,9,]),'VARIABLE':([0,5,8,9,11,12,13,17,18,],[2,2,2,2,2,2,2,2,2,]),'$end':([1,2,3,4,6,7,10,14,15,19,20,21,22,23,24,],[-3,-13,-6,-12,-8,-11,0,-10,-9,-5,-4,-7,-14,-2,-1,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'operator':([0,9,11,12,13,17,18,],[6,6,6,6,21,6,6,]),'pow':([0,9,11,12,17,18,],[3,3,19,20,3,3,]),'term':([0,9,17,18,],[1,1,23,24,]),'num':([0,5,8,9,11,12,13,17,18,],[7,14,15,7,7,7,7,7,7,]),'expression':([0,9,],[10,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression SUBTRACTION term','expression',3,'p_expression_subtraction','parser.py',12),
  ('expression -> expression ADDITION term','expression',3,'p_expression_addition','parser.py',16),
  ('expression -> term','expression',1,'p_expression_term','parser.py',20),
  ('term -> term DIVISION pow','term',3,'p_term_division','parser.py',24),
  ('term -> term MULTIPLICATION pow','term',3,'p_term_multiplication','parser.py',28),
  ('term -> pow','term',1,'p_term_pow','parser.py',32),
  ('pow -> pow POWER operator','pow',3,'p_pow_power','parser.py',36),
  ('pow -> operator','pow',1,'p_pow_operator','parser.py',40),
  ('operator -> SUBTRACTION num','operator',2,'p_operator_minus','parser.py',44),
  ('operator -> SQRT num','operator',2,'p_operator_sqrt','parser.py',48),
  ('operator -> num','operator',1,'p_operator_num','parser.py',52),
  ('num -> NUMBER','num',1,'p_num_number','parser.py',56),
  ('num -> VARIABLE','num',1,'p_num_variable','parser.py',60),
  ('num -> LPAREN expression RPAREN','num',3,'p_num_expr','parser.py',64),
]
